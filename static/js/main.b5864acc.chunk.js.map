{"version":3,"sources":["components/Globe3d.js","utils/api.js","utils/constant.js","App.js","serviceWorker.js","index.js"],"names":["Globe3d","useState","countries","setCountries","hoverD","setHoverD","lat","lng","setCoordinates","colorScale","d3","useEffect","Promise","resolve","reject","countriesWithCovid","axios","get","then","res","data","resp","forEach","item","countryIdxByISO","features","findIndex","i","properties","ISO_A2","countryInfo","iso2","ISO_A3","iso3","push","covid","countryIdxByName","ADMIN","toLowerCase","country","latitude","longitude","console","log","globeImageUrl","backgroundImageUrl","polygonStrokeColor","polygonAltitude","polygonSideColor","polygonsTransitionDuration","polygonCapColor","d","feat","GDP_MD_EST","Math","max","POP_EST","polygonsData","onPolygonHover","pointOfView","altitude","polygonLabel","c","flag","cases","active","deaths","recovered","todayCases","todayDeaths","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iTA0EeA,MAhEf,WAAoB,IAAD,EACmBC,mBAAS,IAD5B,mBACRC,EADQ,KACGC,EADH,OAEaF,qBAFb,mBAERG,EAFQ,KAEAC,EAFA,OAGsBJ,mBAAS,CAACK,IAAK,KAAMC,IAAK,OAHhD,0BAGPD,EAHO,EAGPA,IAAKC,EAHE,EAGFA,IAAMC,EAHJ,KAITC,EAAaC,IAAuBA,KAmB1C,OAhBAC,qBAAU,WAENR,ECfG,IAAIS,SAAQ,SAACC,EAAQC,GACxB,IAAIC,EAAqB,GACzBC,IAAMC,ICJa,mHDKlBC,MAAK,SAAAC,GACF,IAAMjB,EAAYiB,EAAIC,KACtBJ,IAAMC,ICNO,uDDMQC,MAAK,SAAAG,GACTA,EAAKD,KACbE,SAAQ,SAAAC,GACT,IAAMC,EAAkBtB,EAAUuB,SAASC,WACvC,SAAAC,GAAC,OAAIA,EAAEC,WAAWC,SAAWN,EAAKO,YAAYC,MAAQJ,EAAEC,WAAWI,SAAWT,EAAKO,YAAYG,QAEjG,IAAyB,IAArBT,EACFT,EAAmBmB,KAAnB,eACKhC,EAAUuB,SAASD,GADxB,CAEEW,MAAOZ,SAEJ,CAED,IAAMa,EAAmBlC,EAAUuB,SAASC,WACxC,SAAAC,GAAC,OAAIA,EAAEC,WAAWS,MAAMC,gBAAkBf,EAAKgB,QAAQD,kBAGjC,IAAtBF,GACArB,EAAmBmB,KAAnB,eACKhC,EAAUuB,SAASW,GADxB,CAEED,MAAOZ,SAKzBV,EAAQE,YDfQG,MAAK,SAAAC,GACzBhB,EAAagB,SAEhB,IAELR,qBAAU,WCkBD,IAAIC,SAAQ,SAACC,EAAQC,GACxBE,IAAMC,IAAI,oCAAoCC,MAAK,SAAAC,GAC/C,IAAMC,EAAOD,EAAIC,KACjBP,EAAQ,CACJ2B,SAAWpB,EAAKoB,SAChBC,UAAWrB,EAAKqB,kBDtBjBvB,MAAK,SAAAC,GACVuB,QAAQC,IAAIxB,GACZX,EAAe,CAACF,IAAMa,EAAIqB,SAAUjC,IAAMY,EAAIsB,iBAEpD,IAEFC,QAAQC,IAAIrC,GAGR,oCACC,kBAAC,IAAD,CACGsC,cEpCmB,iEFqCnBC,mBEpCwB,+DFqCxBC,mBAAsB,iBAAK,QAC3BC,gBAAmB,IACnBC,iBAAkB,iBAAM,yBACxBC,2BAA4B,IAC5BC,gBAAiB,SAAAC,GAAC,OAAIA,IAAM/C,EAAS,YAAcK,GA3B5C2C,EA2B8DD,GA3BjDvB,WAAWyB,WAAaC,KAAKC,IAAI,IAAKH,EAAKxB,WAAW4B,UAAnE,IAAAJ,GA4BPK,aAAcvD,EACdwD,eAAgBrD,EAChBsD,YAAe,CAACrD,MAAKC,MAAKqD,SAAU,KACpCC,aAAiB,gBAAeV,EAAf,EAAGvB,WAAsBkC,EAAzB,EAAkB3B,MAAlB,2FAEc2B,EAAEhC,YAAYiC,KAF5B,gHAIkBZ,EAAEd,MAJpB,+EAKqByB,EAAEE,MALvB,oLASJF,EAAEG,OATE,yDAUJH,EAAEI,OAVE,uDAWJJ,EAAEK,UAXE,+RAiBHL,EAAEM,WAjBC,kDAkBHN,EAAEO,YAlBC,sGGjCdC,MATf,WACE,OACE,yBAAKC,UAAU,OACd,gDACA,kBAAC,EAAD,QCIeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlE,MAAK,SAAAmE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.b5864acc.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Globe from 'react-globe.gl';\r\nimport * as d3 from \"d3\";\r\nimport {\r\n    GLOBE_IMAGE_URL,\r\n    BACKGROUND_IMAGE_URL,\r\n  } from '../utils/constant';\r\n\r\nimport {getCases, getPov} from '../utils/api';\r\n\r\nfunction Globe3d() {\r\n    const [countries, setCountries] = useState([]);\r\n    const [hoverD, setHoverD] = useState();\r\n    const [{lat, lng}, setCoordinates] = useState({lat: null, lng: null});\r\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\r\n    const getVal = feat => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\r\n\r\n    useEffect(() => {\r\n        // load data\r\n        setCountries(getCases().then(res => {\r\n            setCountries(res)\r\n        }))\r\n      }, []);\r\n\r\n    useEffect(() => {\r\n        getPov().then(res => {\r\n            console.log(res)\r\n            setCoordinates({lat : res.latitude, lng : res.longitude})\r\n        })\r\n    },[])\r\n\r\n    console.log(lat)\r\n      \r\n    return (\r\n        <>\r\n         <Globe\r\n            globeImageUrl={GLOBE_IMAGE_URL}\r\n            backgroundImageUrl={BACKGROUND_IMAGE_URL}\r\n            polygonStrokeColor = {() =>'#111'}\r\n            polygonAltitude = {0.06}\r\n            polygonSideColor={() => 'rgba(0, 100, 0, 0.05)'}\r\n            polygonsTransitionDuration={200}\r\n            polygonCapColor={d => d === hoverD ? 'steelblue' : colorScale(getVal(d))}\r\n            polygonsData={countries}\r\n            onPolygonHover={setHoverD}\r\n            pointOfView = {{lat, lng, altitude: 1000}}\r\n            polygonLabel =  {({ properties: d, covid: c }) => `\r\n            <div class=\"card\">\r\n              <img class=\"card-img\" src=\"${c.countryInfo.flag}\" alt=\"flag\" />\r\n              <div class=\"container\">\r\n                 <span class=\"card-title\"><b>${d.ADMIN}</b></span> <br />\r\n                 <span class=\"card-total-cases\">${c.cases} total cases</span>\r\n                 <div class=\"card-spacer\"></div>\r\n                 <hr />\r\n                 <div class=\"card-spacer\"></div>\r\n                 <span>${c.active} active</span> <br />\r\n                 <span>${c.deaths} dead</span> <br />\r\n                 <span>${c.recovered} recovered</span>\r\n                 <div class=\"card-spacer\"></div>\r\n                 <hr />\r\n                 <div class=\"card-spacer\"></div>\r\n                 <div class=\"bottom-info\">\r\n                  <span style=\"color: goldenrod;\">Today</span>\r\n                  <span>${c.todayCases} cases</span>\r\n                  <span>${c.todayDeaths} deaths</span>\r\n                 </div>\r\n              </div>\r\n            </div>\r\n          `}\r\n         />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Globe3d;","import { GEOJSON_URL, CASES_API} from './constant';\r\nimport axios from 'axios';\r\n\r\n export const  getCases = () => {\r\n    return new Promise((resolve,reject) => {\r\n        let countriesWithCovid = [];\r\n        axios.get(GEOJSON_URL)\r\n        .then(res => {\r\n            const countries = res.data;\r\n            axios.get(CASES_API).then(resp => {\r\n                const data = resp.data;\r\n                data.forEach(item => {\r\n                    const countryIdxByISO = countries.features.findIndex(\r\n                        i => i.properties.ISO_A2 === item.countryInfo.iso2 && i.properties.ISO_A3 === item.countryInfo.iso3\r\n                      );\r\n                      if (countryIdxByISO !== -1) {\r\n                        countriesWithCovid.push({\r\n                          ...countries.features[countryIdxByISO],\r\n                          covid: item\r\n                        });\r\n                      } else {\r\n                                                // If no country was found using their ISO, try with name\r\n                            const countryIdxByName = countries.features.findIndex(\r\n                                i => i.properties.ADMIN.toLowerCase() === item.country.toLowerCase()\r\n                            );\r\n\r\n                            if (countryIdxByName !== -1) {\r\n                                countriesWithCovid.push({\r\n                                  ...countries.features[countryIdxByName],\r\n                                  covid: item\r\n                                });\r\n                              }\r\n                      }\r\n                })\r\n                resolve(countriesWithCovid)\r\n            })\r\n        })\r\n\r\n    })\r\n  }\r\n\r\n  export const getPov = () => {\r\n      return new Promise((resolve,reject) => {\r\n          axios.get('https://geolocation-db.com/json/').then(res => {\r\n              const data = res.data;\r\n              resolve({\r\n                  latitude : data.latitude,\r\n                  longitude: data.longitude\r\n              })\r\n          })\r\n      })\r\n  }\r\n\r\n","export const GLOBE_IMAGE_URL = '//cdn.jsdelivr.net/npm/three-globe/example/img/earth-night.jpg';\r\nexport const BACKGROUND_IMAGE_URL = '//cdn.jsdelivr.net/npm/three-globe/example/img/night-sky.png';\r\nexport const GEOJSON_URL = 'https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson';\r\nexport const CASES_API = 'https://corona.lmao.ninja/v2/countries?sort=country';","import React from 'react';\nimport './App.css';\nimport Globe from  './components/Globe3d';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h1>My Covid tracker</h1>\n     <Globe/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}